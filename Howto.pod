=encoding utf8

=head1 NAME

HOWTO for the Games::Lacuna::Task automation framework

=head1 USERS

After installing Games::Lacuna::Task you need to start either the 
C<lacuna_run> or the C<lacuna_task> script. It will prompt you your empire 
name, server and password and store them to in a sqlite database in the 
C<database> directory (Defaults to ~/.lacuna)

Optionally you can create a configuration file called config.yml in the same
directory. The file should have the following format:

 ---
 connect: 
    # Optional. If not present taken from database
    name: "Empire name"
    password: "Empire password"
    api_key: "Api key"      # Optional
    uri: "Server URL"       # Optional
 global:
    # Which tasks should be run (if not provided via commandline options)
    task:
      - task1_name
    # Which tasks should be excluded (if not provided via commandline options)
    exclude:
      - task2_name
    # Global task options
    global_task_opion: ...
 task1_name:
   exclude_planet:
     - Planet A
     - Planet B
   task1_option1: 80
   task1_option2: ...
 task2_name:
   task2_option1: 
     - "some"
     - "value"

Information about available tasks and their configuration options is available
when running C<lacuna_task> with the C<--task_info> option, or via
C<lacuna_run help --help> or C<lacuna_run COMMAND --help>

=head1 DEVELOPERS

It is easy to create your own tasks. First you need to create a package
in the C<Games::Lacuna::Task::Action::*> namespace which should inherit from 
L<Games::Lacuna::Task::Action>.

If your tasks is "planet-centric" you need to implement a C<process_planet>
method and use the C<Games::Lacuna::Task::Role::PlanetRun> role, otherwise 
you need to implement the C<run> method. The C<process_planet> method 
will recieve the planet stats hash as the first argument.

Furthermore your task class has to implement a C<documentation> function
that returns a short task description string.

If your tasks requires configuration values you can specify moose accessors.
Accessors should have a documentation string and meaningfull defaults. You
can add the 'NoIntrospection' trait if you do not want to display an
accessor in the task info.

Optionall you can set the 'NoAutomatic' class trait, indication that this task
should not be run automatically/unatented but requires som sort of
extra input or human interaction.

 use Moose -traits => 'NoAutomatic';

In your task class you have access to various helper methods that are provided
by several roles:

=head2 Games::Lacuna::Task::Role::Client

Basic methods to access the Lacuna API via L<Games::Lacuna::Task::Client>.
Is always loaded.

=head2 Games::Lacuna::Task::Role::Logger

Prints log messages. Is always loaded.

=head2 Games::Lacuna::Task::Role::Helper

Various helper methods. Is always loaded.

=head2 Games::Lacuna::Task::Role::Stars

Helper methods for working with the star map.

=head2 Games::Lacuna::Task::Role::Ships

Helper methods for fetching and building ships.

=head2 Games::Lacuna::Task::Role::Intelligence

Helper methods for working with spies.

=head2 Games::Lacuna::Task::Role::Notify

Helper methods for sending notification e-mails.

=head2 Games::Lacuna::Task::Role::Storage

Helper methods for querying the storage

=head2 Games::Lacuna::Task::Role::Waste

Helper methods for handling waste

=head2 Games::Lacuna::Task::Role::Building

Helper methods for handling buildings.

=head2 Games::Lacuna::Task::Role::CommonAttributes

Role providing common attributes used by multiple actions.

Tasks can also be called/embedded/executed directly

 use Games::Lacuna::Task::Action::Archaeology;
 my $task = Games::Lacuna::Task::Action::Archaeology->new(
    config_dir      => $path_to_config_dir,       # only needed if client is not provided and if different from default
    client          => $game_lacuna_task_client,  # will be auto-built if not provided
    other options ...
 );
 $task->execute; # Catches exceptions
 OR 
 $task->run; # Does not catch exceptions

=head1 INSTALLING

Before installing C<Game::Lacuna::Task> you need to install 
<Game::Lacuna::Client> from https://github.com/tsee/Games-Lacuna-Client.

Then continue by typing

 perl Build.PL
 ./Build
 ./Build installdeps
 ./Build install
 ./Build clean

Alternatively you can install missing dependencies via cpanminus:
 
 # Install cpanmius (also available as packages for debian, fedora, ...)
 curl -L http://cpanmin.us | perl - App::cpanminus
 # Now install 'Moose' via cpanminus
 cpanm Moose


=cut
